package co.edu.ue.controller;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import co.edu.ue.entity.Fotografias;
import co.edu.ue.service.FotografiasService;
import co.edu.ue.service.IFotografiasService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.List;

@RestController
@RequestMapping("fotografias")
public class FotografiasController {

    @Autowired
    private FotografiasService service; // Inyección del servicio

    // Método para guardar una nueva fotografía
    @PostMapping
    public ResponseEntity<Fotografias> guardarFotografias(@RequestBody Fotografias fotografia) {
        Fotografias nuevaFotografia = service.guardarFotografias(fotografia);
        return ResponseEntity.status(HttpStatus.CREATED).body(nuevaFotografia);
    }

    // Método para obtener todas las fotografías
    @GetMapping
    public ResponseEntity<List<Fotografias>> obtenerTodasLasFotografias() {
        List<Fotografias> fotografias = service.obtenerTodasLasFotografias();
        return ResponseEntity.ok(fotografias);
    }

    // Método para obtener una fotografía por ID
    @GetMapping("/{fotId}")
    public ResponseEntity<Fotografias> obtenerFotografiaPorId(@PathVariable int fotId) {
        Fotografias fotografia = service.obtenerFotografiaPorId(fotId);
        if (fotografia != null) {
            return ResponseEntity.ok(fotografia);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }

    // Método para actualizar una fotografía
    @PutMapping("/{fotId}")
    public ResponseEntity<Fotografias> actualizarFotografia(@PathVariable int fotId, @RequestBody Fotografias fotografiaActualizada) {
        Fotografias fotografia = service.actualizarFotografia(fotId, fotografiaActualizada);
        if (fotografia != null) {
            return ResponseEntity.ok(fotografia);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }

    // Método para eliminar una fotografía
    @DeleteMapping("/{fotId}")
    public ResponseEntity<Void> eliminarFotografia(@PathVariable int fotId) {
        boolean eliminado = service.eliminarFotografias(fotId);
        if (eliminado) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }
}